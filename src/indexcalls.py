
import glob
import re
import sys
import xml.etree.ElementTree as ET

def checkversion():
  if sys.version_info[0] != 3:
    print('Not Python 3!')
    sys.exit(1)
  if sys.platform.startswith('win32'):
    sys.stderr.write('Do not use win python!\n')
    sys.exit(1)

def main():
  #  Build table of calls in each file
  r = re.compile(r'title="(.*?)"')
  r2 = re.compile(r'/(b1|b2|ms|plus|a1|a2|c1|c2|c3a)/')
  r3 = re.compile(r'Call\.classes\.(.+?)\s*=')
  r4 = re.compile(r'\W')
  #  Start a new xml document for the output
  newtree = ET.ElementTree(ET.Element('calls'))
  newroot = newtree.getroot()
  #  Read animations from xml files
  for filename in glob.glob('../*/*.xml'):
    if not r2.search(filename):
      continue
    if filename.endswith('.x.xml'):
      continue
    calls = set()
    for line in open(filename):
      m = r.search(line)
      if m and not m.group(1).lower() in calls:
        c = ET.SubElement(newroot,'call')
        c.set('text',re.sub(r4,'',m.group(1).lower()))
        c.set('link',filename.lstrip('./'))
        calls.add(m.group(1).lower())

  #  Read scripts from javascript and python files
  for filename in glob.glob('calls/*.js'): # + glob.glob('../squareplay/src/calls/*.py'):
    for line in open(filename):
      m = r3.search(line)
      if m:
        c = ET.SubElement(newroot,'call')
        c.set('text',re.sub(r4,'',m.group(1).lower()))
        c.set('link',filename)

  #  Pretty-print the results
  print('<?xml version="1.0"?>')
  print('<!DOCTYPE tamination SYSTEM "tamination.dtd">')
  print('<!--  This file was generated by indexcalls.py  -->')
  print('<calls>')
  for child in newroot:
    print('  '+ET.tostring(child,encoding="unicode"))
  print('</calls>')

checkversion()
main()
